
# Run `travis lint` when changing this file to avoid breaking the build.

# See https://docs.travis-ci.com/user/reference/overview/#for-a-particular-travisyml-configuration
virt: lxd   # LXD containers where possible as they boot much faster than full VMs
os: linux   # required for arch different than amd64
dist: focal # newest available distribution


# license-maven-plugin needs the full history to generate copyright year range. Ex. 2013-2020
# Don't do a shallow clone, as it interferes with this.
git:
  depth: false

language: java

cache:
  directories:
  # zipkin-lens gets dependencies via NPM
  - $HOME/.npm
  - $HOME/.m2

services:
  - docker

# Re-use JDK 11 from focal release instead of delaying build with installation
before_install:
  - |
    # Cache as help:evaluate is not quick
    export POM_VERSION=$(./mvnw help:evaluate -N -Dexpression=project.version -q -DforceStdout)
  - |
    # Defend against build outages caused by Docker Hub (docker.io) pull rate limits

    # We don't use any docker.io images, but add a Google's mirror in case something implicitly does
    # * See https://cloud.google.com/container-registry/docs/pulling-cached-images
    echo '{ "registry-mirrors": ["https://mirror.gcr.io"] }' | sudo tee /etc/docker/daemon.json
    sudo service docker restart
    # * Ensure buildx and related features are disabled
    mkdir -p ${HOME}/.docker && echo '{"experimental":"disabled"}' > ${HOME}/.docker/config.json

    # Change testcontainers configuration so that it doesn't pull from docker.io
    # * See https://www.testcontainers.org/supported_docker_environment/image_registry_rate_limiting/
    # * checks.disable=true - saves time and a docker.io pull of alpine
    echo checks.disable=true >> ~/.testcontainers.properties
    # * change ryuk to ghcr.io until: https://github.com/testcontainers/moby-ryuk/issues/15 and 16
    echo ryuk.container.image=ghcr.io/openzipkin/testcontainers-ryuk:latest >> ~/.testcontainers.properties
  - |
    # Credentials entered into https://travis-ci.com/github/openzipkin/${REPO}/settings are access
    # controlled by branch (typically only master). Check to see if a well-known env is available
    # before attempting to log in.
    if [[ -n "$SONATYPE_USER" ]]; then
      # re-use this condition to control if we prepare Docker for multi-arch
      build-bin/setup_multiarch_docker

      # allocate commits to CI, not the owner of the deploy key
      git config user.name "zipkinci"
      git config user.email "zipkinci+zipkin-dev@googlegroups.com"

      # setup https authentication credentials, used by ./mvnw release:prepare
      git config credential.helper "store --file=.git/credentials"
      echo "https://$GH_TOKEN:@github.com" > .git/credentials

      # Log in to GitHub Container Registry and Docker Hub for releasing images
      echo "$GH_TOKEN"| docker login ghcr.io -u "$GH_USER" --password-stdin
      echo "$DOCKERHUB_TOKEN"| docker login -u "$DOCKERHUB_USER" --password-stdin

      # ensure GPG commands work non-interactively
      export GPG_TTY=$(tty)
      # import signing key used for jar files
      echo ${GPG_SIGNING_KEY} | base64 --decode | gpg --batch --passphrase ${GPG_PASSPHRASE} --import
    fi

install: ./build-bin/go_offline
jobs:
  include:
    # TODO: Refactor ./travis/publish.sh into two stages: test and deploy
    - stage: test
      name: "Run unit and integration tests including Docker [amd64]. Deploys when a master push"
      arch: amd64 # Not arm64 for multi-platform Docker builds (qemu is amd64->arm64, not vice versa)
      script: ./travis/publish.sh
      if: 'NOT tag =~ /^docker-/'
    - stage: test
      name: "Run unit and integration tests including Docker [arm64]"
      arch: arm64 # Not arm64-graviton2 as it cycles on boot for a long time before running [2020-11-02]
      # We run tests on non-tagged pushes to master that aren't commit made by the release plugin
      # We also run tests on pull requests targeted at the master branch.
      if: |
        branch = master AND tag IS blank AND \
        commit_message !~ /maven-release-plugin/ AND \
        type IN (push, pull_request)
      # -DskipActuator ensures no tests rely on the actuator library
      script: ./mvnw verify -nsu -DskipActuator || travis_terminate 1
    - name: Re-push all Docker images
      arch: amd64 # Not arm64 for multi-platform Docker builds (qemu is amd64->arm64, not vice versa)
      script:
        - |
          docker/bin/push_all_images $(echo "${TRAVIS_TAG}" | sed 's/^docker-//') &&
          git push origin :"${TRAVIS_TAG}"
      if: 'type IN (push) and tag =~ /^docker-/'

# Don't build release tags. This avoids publish conflicts because the version commit exists both on master and the release tag.
# See https://github.com/travis-ci/travis-ci/issues/1532
branches:
  except:
    - /^[0-9]/

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/ead3c37d57527214e9f2
      - https://webhooks.gitter.im/e/9f1ee2f315d32956f8d6
    on_success: change
    on_failure: always

# Secure variables needed for release and publication
#
# When Travis, add to https://travis-ci.com/github/openzipkin/${REPO}/settings
#
# GH_TOKEN=XXX-https://github.com/settings/tokens-XXX
#   - makes release commits and tags, also writes to GHCR if Docker
#   - needs repo:status, public_repo and if Docker write:packages, delete:packages
#   - referenced in .settings.xml
#   - store like this: echo "https://$GH_TOKEN:@github.com" > .git/credentials
# GH_USER=user_that_created_GH_TOKEN
#   - login like this: echo "$GH_TOKEN"| docker login ghcr.io -u "$GH_USER" --password-stdin
# GPG_SIGNING_KEY=$(gpg -a --export-secret-keys zipkin-admin@googlegroups.com |base64)
#   - used to sign jars in release commands
#   - sent to keyserver.ubuntu.com
#   - import like this: echo ${GPG_SIGNING_KEY} | base64 --decode | gpg --batch --passphrase ${GPG_PASSPHRASE} --import
# GPG_PASSPHRASE=passphrase_for_GPG_SIGNING_KEY
#   - referenced in .settings.xml
# SONATYPE_USER=your_sonatype_account_token
#   - used to publish to Maven Central via https://oss.sonatype.org/#stagingRepositories
#   - needs access to io.zipkin via https://issues.sonatype.org/browse/OSSRH-16669
#   - generate via https://oss.sonatype.org/#profile;User%20Token
#   - referenced in .settings.xml
# SONATYPE_PASSWORD=password_to_SONATYPE_USER
#   - referenced in .settings.xml
# DOCKERHUB_USER=typically_dockerzipkindeployer
#   - only push top-level projects: zipkin zipkin-aws zipkin-dependencies zipkin-gcp to Docker Hub, only on release
#   - login like this: echo "$DOCKERHUB_TOKEN"| docker login -u "$DOCKERHUB_USER" --password-stdin
# DOCKERHUB_TOKEN=access_token_for_DOCKERHUB_USER
#   -  Access Token from here https://hub.docker.com/settings/security
